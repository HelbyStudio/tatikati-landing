---
import { useTranslations } from '../i18n/utils.js';
import { translations, type Locale } from '../i18n/translations.js';
import { getCollection } from 'astro:content';
import AppStoreBadges from './AppStoreBadges.astro';

interface Props {
  title?: string;
  subtitle?: string;
  showAll?: boolean;
  locale?: Locale;
}

const {
  title,
  subtitle,
  showAll = true,
  locale = 'fr'
} = Astro.props;

const t = useTranslations(locale);

// Use translations for titles with fallback
const finalTitle = title || t('reviews.title');
const finalSubtitle = subtitle || t('reviews.subtitle');

// Get reviews data from locale-specific collection
const collectionName = `reviews-${locale}` as 'reviews-fr' | 'reviews-en';
const allReviews = await getCollection(collectionName);

// Transform reviews data with avatars (using natural array order)
const reviewsWithAvatars = allReviews.map((review, index) => ({
  ...review.data,
  avatar: [
    'https://images.unsplash.com/photo-1494790108755-2616b612b098?w=64&h=64&fit=crop&crop=face',
    'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=64&h=64&fit=crop&crop=face',
    'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=64&h=64&fit=crop&crop=face',
    'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=64&h=64&fit=crop&crop=face'
  ][index] || 'https://images.unsplash.com/photo-1494790108755-2616b612b098?w=64&h=64&fit=crop&crop=face'
}));

const displayReviews = showAll ? reviewsWithAvatars : reviewsWithAvatars.slice(0, 3);

// Generate star ratings
function generateStars(rating: number) {
  const stars = [];
  for (let i = 1; i <= 5; i++) {
    stars.push(i <= rating ? 'filled' : 'empty');
  }
  return stars;
}

// Generate initials from name
function getInitials(name: string): string {
  return name
    .split(' ')
    .map(word => word.charAt(0))
    .join('')
    .toUpperCase()
    .substring(0, 2);
}

// Generate color for monogram based on name
function getMonogramColor(name: string): string {
  const colors = [
    'var(--color-accent-1)',
    'var(--color-accent-2)',
    'var(--color-accent-3)',
    'var(--color-accent-4)'
  ];
  const hash = name.split('').reduce((a, b) => {
    a = ((a << 5) - a) + b.charCodeAt(0);
    return a & a;
  }, 0);
  return colors[Math.abs(hash) % colors.length];
}
---

<section class="reviews" id="avis">
  <div class="container">
    <!-- Section Header -->
    <div class="reviews-header">
      <h2 class="section-title">{finalTitle}</h2>
      <p class="section-subtitle">{finalSubtitle}</p>
    </div>

    <!-- Reviews Grid -->
    <div class="reviews-grid">
      {displayReviews.map((review, index) => (
        <div 
          class="review-card"
          data-review-index={index}
        >
          <!-- Review Header -->
          <div class="review-header">
            <div class="reviewer-info">
              <div class="reviewer-avatar monogram" style={`background-color: ${getMonogramColor(review.name)}`}>
                <span class="monogram-text">{getInitials(review.name)}</span>
              </div>
              <div class="reviewer-details">
                <h3 class="reviewer-name">{review.name}</h3>
                <div class="review-rating" aria-label={`Note ${review.rating} sur 5 étoiles`}>
                  {generateStars(review.rating).map((star, starIndex) => (
                    <svg 
                      key={starIndex}
                      class={`star star-${star}`}
                      width="16" 
                      height="16" 
                      viewBox="0 0 16 16" 
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path d="M8 1L10.1 5.4L15 6.1L11.5 9.4L12.2 14.3L8 12L3.8 14.3L4.5 9.4L1 6.1L5.9 5.4L8 1Z"/>
                    </svg>
                  ))}
                </div>
              </div>
            </div>
            
            <!-- Verified Badge -->
            <div class="verified-badge">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                <path d="M10 1L12.5 3.5L16 2L17 5.5L20 6.5L18.5 10L20 13.5L17 14.5L16 18L12.5 16.5L10 19L7.5 16.5L4 18L3 14.5L0 13.5L1.5 10L0 6.5L3 5.5L4 2L7.5 3.5L10 1Z"/>
                <path d="M6 10L8.5 12.5L14 7L15 8L8.5 14.5L5 11L6 10Z" fill="white"/>
              </svg>
              <span class="sr-only">Avis vérifié</span>
            </div>
          </div>
          
          <!-- Review Content -->
          <div class="review-content">
            <blockquote class="review-quote">
              "{review.quote}"
            </blockquote>
          </div>
        </div>
      ))}
    </div>

    <!-- Call to Action -->
    <div class="reviews-cta">
      <div class="cta-content">
        <h3 class="cta-title">Rejoignez des milliers de familles satisfaites</h3>
        <p class="cta-description">
          Découvrez pourquoi Tatikati est devenu l'application de podcasts préférée des enfants et des parents.
        </p>
        <div class="cta-actions">
          <a href="/blog" class="btn btn-primary btn-lg">
            Lire nos conseils
          </a>
          <!-- App Store Badges -->
          <AppStoreBadges size="medium" />
        </div>
      </div>
    </div>
  </div>

  <!-- Background Decoration -->
  <div class="reviews-bg" aria-hidden="true">
    <div class="bg-quote bg-quote-1">"</div>
    <div class="bg-quote bg-quote-2">"</div>
  </div>
</section>

<style>
  .reviews {
    padding: var(--space-4xl) 0;
    background: linear-gradient(180deg, var(--color-gray-25) 0%, var(--color-bg) 100%);
    position: relative;
    overflow: hidden;
  }

  .reviews-header {
    text-align: center;
    margin-bottom: var(--space-4xl);
  }

  .section-title {
    font-family: var(--font-heading);
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 700;
    color: var(--color-fg);
    margin-bottom: var(--space-lg);
  }

  .section-subtitle {
    font-size: clamp(1.1rem, 2vw, 1.25rem);
    color: var(--color-gray-600);
    line-height: 1.6;
    margin-bottom: var(--space-2xl);
  }

  /* Reviews Grid */
  .reviews-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: var(--space-2xl);
    margin-bottom: var(--space-4xl);
  }

  .review-card {
    background: white;
    border-radius: var(--radius-xl);
    padding: var(--space-2xl);
    box-shadow: var(--shadow-card);
    border: 1px solid var(--color-gray-200);
    position: relative;
    transition: all 0.3s ease;
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 0.8s ease-out forwards;
  }

  .review-card:nth-child(1) { animation-delay: 0.1s; }
  .review-card:nth-child(2) { animation-delay: 0.2s; }
  .review-card:nth-child(3) { animation-delay: 0.3s; }
  .review-card:nth-child(4) { animation-delay: 0.4s; }

  .review-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-hover);
  }

  .review-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--space-lg);
  }

  .reviewer-info {
    display: flex;
    align-items: center;
    gap: var(--space-md);
  }

  .reviewer-avatar {
    flex-shrink: 0;
  }

  .reviewer-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--color-accent-1);
    flex-shrink: 0;
  }

  .monogram-text {
    color: white;
    font-weight: 600;
    font-size: 1rem;
    font-family: var(--font-heading);
  }

  .reviewer-name {
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-fg);
    margin-bottom: var(--space-xs);
  }

  .review-rating {
    display: flex;
    gap: 2px;
  }

  .star {
    color: var(--color-gray-300);
    transition: color 0.2s ease;
  }

  .star-filled {
    color: var(--color-accent-2);
  }

  .verified-badge {
    flex-shrink: 0;
    color: var(--color-accent-4);
    opacity: 0.8;
  }

  .review-content {
    margin-bottom: var(--space-lg);
  }

  .review-quote {
    font-style: italic;
    font-size: 1.05rem;
    line-height: 1.6;
    color: var(--color-gray-700);
    margin: 0;
    position: relative;
  }

  .review-quote::before {
    content: '"';
    position: absolute;
    top: -10px;
    left: -20px;
    font-size: 3rem;
    font-family: var(--font-heading);
    color: var(--color-accent-1);
    opacity: 0.3;
  }


  /* Reviews CTA */
  .reviews-cta {
    background: linear-gradient(135deg, var(--color-accent-1), var(--color-accent-3));
    border-radius: var(--radius-2xl);
    padding: var(--space-3xl);
    color: white;
    text-align: center;
  }

  .cta-title {
    font-family: var(--font-heading);
    font-size: clamp(1.5rem, 3vw, 2.25rem);
    font-weight: 700;
    margin-bottom: var(--space-md);
    color: white;
  }

  .cta-description {
    font-size: 1.1rem;
    line-height: 1.6;
    margin-bottom: var(--space-xl);
    color: rgba(255, 255, 255, 0.9);
  }

  .cta-actions {
    display: flex;
    gap: var(--space-2xl);
    justify-content: center;
    flex-wrap: wrap;
    align-items: center;
  }

  .cta-actions .btn-primary {
    background: white;
    color: var(--color-accent-1);
  }

  .cta-actions .btn-primary:hover {
    background: var(--color-gray-100);
    color: var(--color-accent-1);
  }


  /* Background Decoration */
  .reviews-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 0;
  }

  .bg-quote {
    position: absolute;
    font-family: var(--font-heading);
    font-size: 15rem;
    font-weight: 700;
    color: var(--color-accent-1);
    opacity: 0.02;
    user-select: none;
  }

  .bg-quote-1 {
    top: 10%;
    left: -5%;
    transform: rotate(-15deg);
  }

  .bg-quote-2 {
    bottom: 10%;
    right: -5%;
    transform: rotate(15deg);
  }

  /* Animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive Design */
  @media (max-width: 767px) {
    .reviews-grid {
      grid-template-columns: 1fr;
      gap: var(--space-xl);
    }

    .review-header {
      flex-direction: column;
      gap: var(--space-sm);
      align-items: flex-start;
    }

    .cta-actions {
      flex-direction: column;
      align-items: center;
    }

  }

  @media (min-width: 1024px) {
    .cta-actions {
      justify-content: center;
    }
  }


  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .review-card {
      animation: none;
      opacity: 1;
      transform: none;
    }

    .review-card:hover {
      transform: none;
    }

  }

  /* Screen Reader Only */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Intersection Observer for review cards animation
    if (window.IntersectionObserver) {
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-in');
            observer.unobserve(entry.target);
          }
        });
      }, observerOptions);

      const reviewCards = document.querySelectorAll('.review-card');
      reviewCards.forEach(card => {
        observer.observe(card);
      });
    }

    // Star rating hover effect
    const reviewCards = document.querySelectorAll('.review-card');
    reviewCards.forEach(card => {
      const stars = card.querySelectorAll('.star');
      
      card.addEventListener('mouseenter', () => {
        stars.forEach((star, index) => {
          setTimeout(() => {
            star.style.transform = 'scale(1.2)';
          }, index * 50);
          
          setTimeout(() => {
            star.style.transform = 'scale(1)';
          }, (index * 50) + 200);
        });
      });
    });


    // Smooth scroll for CTA buttons
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  });
</script>