---
import { features } from '../data/features.ts';

interface Props {
  title?: string;
  subtitle?: string;
  showAll?: boolean;
  layout?: 'grid' | 'list';
}

const {
  title = "Pourquoi choisir Tatikati ?",
  subtitle = "Des fonctionnalités pensées pour les enfants et leurs parents",
  showAll = true,
  layout = 'grid'
} = Astro.props;

const displayFeatures = showAll ? features : features.slice(0, 3);
---

<section class="features" id="features">
  <div class="container">
    <!-- Section Header -->
    <div class="features-header">
      <h2 class="section-title">{title}</h2>
      <p class="section-subtitle">{subtitle}</p>
    </div>

    <!-- Features Grid/List -->
    <div class={`features-container features-${layout}`}>
      {displayFeatures.map((feature, index) => (
        <div 
          class="feature-card"
          data-feature-index={index}
        >
          <div class="feature-icon" set:html={feature.icon} />
          
          <div class="feature-content">
            <h3 class="feature-title">{feature.title}</h3>
            <p class="feature-description">{feature.description}</p>
          </div>
          
          <div class="feature-decoration" aria-hidden="true">
            <div class="decoration-dot"></div>
            <div class="decoration-line"></div>
          </div>
        </div>
      ))}
    </div>

    <!-- Additional Info -->
    <div class="features-footer">
      <div class="features-highlight">
        <div class="highlight-icon">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 7.5V9C15 11.8 12.8 14 10 14S5 11.8 5 9V7.5L3 7V9C3 12.2 5.3 14.8 8.4 15.7V22H10.6V15.7C13.7 14.8 16 12.2 16 9H21Z"/>
          </svg>
        </div>
        <div class="highlight-content">
          <h4 class="highlight-title">Conçu par des parents, pour des parents</h4>
          <p class="highlight-text">
            J'ai créé Tatikati 
            pour répondre aux vrais besoins des familles modernes.
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- Background Elements -->
  <div class="features-bg" aria-hidden="true">
    <div class="bg-pattern bg-pattern-1"></div>
    <div class="bg-pattern bg-pattern-2"></div>
  </div>
</section>

<style>
  .features {
    position: relative;
    padding: var(--space-4xl) 0;
    background: linear-gradient(180deg, var(--color-bg) 0%, var(--color-gray-25) 100%);
    overflow: hidden;
  }

  .features-header {
    text-align: center;
    margin-bottom: var(--space-4xl);
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
  }

  .section-title {
    font-family: var(--font-heading);
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 700;
    color: var(--color-fg);
    margin-bottom: var(--space-lg);
    line-height: 1.2;
  }

  .section-subtitle {
    font-size: clamp(1.1rem, 2vw, 1.25rem);
    color: var(--color-gray-600);
    line-height: 1.6;
  }

  /* Features Container */
  .features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: var(--space-2xl);
    margin-bottom: var(--space-4xl);
  }

  .features-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-xl);
    margin-bottom: var(--space-4xl);
  }

  /* Feature Cards */
  .feature-card {
    position: relative;
    background: white;
    border-radius: var(--radius-xl);
    padding: var(--space-2xl);
    box-shadow: var(--shadow-card);
    border: 1px solid var(--color-gray-200);
    transition: all 0.4s ease;
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 0.8s ease-out forwards;
  }

  .feature-card:nth-child(1) { animation-delay: 0.1s; }
  .feature-card:nth-child(2) { animation-delay: 0.2s; }
  .feature-card:nth-child(3) { animation-delay: 0.3s; }
  .feature-card:nth-child(4) { animation-delay: 0.4s; }
  .feature-card:nth-child(5) { animation-delay: 0.5s; }
  .feature-card:nth-child(6) { animation-delay: 0.6s; }

  .feature-card:hover {
    transform: translateY(-8px);
    box-shadow: var(--shadow-hover);
    border-color: var(--color-accent-1);
  }

  .features-list .feature-card {
    display: flex;
    align-items: center;
    gap: var(--space-xl);
    padding: var(--space-xl);
  }

  .features-list .feature-card:hover {
    transform: translateX(8px);
  }

  /* Feature Icon */
  .feature-icon {
    flex-shrink: 0;
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, var(--color-accent-1), var(--color-accent-2));
    border-radius: var(--radius-lg);
    margin-bottom: var(--space-lg);
    color: white;
    transition: transform 0.3s ease;
  }

  .feature-card:hover .feature-icon {
    transform: scale(1.1) rotate(5deg);
  }

  .features-list .feature-icon {
    margin-bottom: 0;
  }

  .feature-icon :global(svg) {
    width: 32px;
    height: 32px;
  }

  /* Feature Content */
  .feature-content {
    flex: 1;
  }

  .feature-title {
    font-family: var(--font-heading);
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--color-fg);
    margin-bottom: var(--space-sm);
    line-height: 1.3;
  }

  .feature-description {
    color: var(--color-gray-600);
    line-height: 1.6;
    font-size: 1rem;
  }

  /* Feature Decoration */
  .feature-decoration {
    position: absolute;
    top: var(--space-lg);
    right: var(--space-lg);
    opacity: 0.3;
    transition: opacity 0.3s ease;
  }

  .feature-card:hover .feature-decoration {
    opacity: 0.6;
  }

  .decoration-dot {
    width: 8px;
    height: 8px;
    background: var(--color-accent-1);
    border-radius: 50%;
    margin-bottom: 4px;
  }

  .decoration-line {
    width: 2px;
    height: 20px;
    background: linear-gradient(to bottom, var(--color-accent-1), transparent);
    margin-left: 3px;
  }

  .features-list .feature-decoration {
    display: none;
  }

  /* Features Footer */
  .features-footer {
    margin-top: var(--space-4xl);
  }

  .features-highlight {
    display: flex;
    align-items: center;
    gap: var(--space-xl);
    background: linear-gradient(135deg, var(--color-accent-4), var(--color-accent-3));
    border-radius: var(--radius-2xl);
    padding: var(--space-2xl);
    color: white;
    animation: fadeInUp 0.8s ease-out 0.8s both;
  }

  .highlight-icon {
    flex-shrink: 0;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.2);
    border-radius: var(--radius-lg);
  }

  .highlight-content {
    flex: 1;
  }

  .highlight-title {
    font-family: var(--font-heading);
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: var(--space-sm);
    color: white;
  }

  .highlight-text {
    color: rgba(255, 255, 255, 0.9);
    line-height: 1.6;
  }

  /* Background Patterns */
  .features-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    pointer-events: none;
  }

  .bg-pattern {
    position: absolute;
    opacity: 0.03;
  }

  .bg-pattern-1 {
    top: 20%;
    left: -5%;
    width: 200px;
    height: 200px;
    background: radial-gradient(circle, var(--color-accent-1) 2px, transparent 2px);
    background-size: 20px 20px;
    animation: drift 20s linear infinite;
  }

  .bg-pattern-2 {
    bottom: 10%;
    right: -5%;
    width: 150px;
    height: 150px;
    background: radial-gradient(circle, var(--color-accent-2) 2px, transparent 2px);
    background-size: 15px 15px;
    animation: drift 25s linear infinite reverse;
  }

  /* Animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes drift {
    0% {
      transform: translateX(0) translateY(0);
    }
    25% {
      transform: translateX(20px) translateY(-10px);
    }
    50% {
      transform: translateX(0) translateY(-20px);
    }
    75% {
      transform: translateX(-20px) translateY(-10px);
    }
    100% {
      transform: translateX(0) translateY(0);
    }
  }

  /* Responsive Design */
  @media (max-width: 767px) {
    .features-grid {
      grid-template-columns: 1fr;
      gap: var(--space-xl);
    }

    .features-list .feature-card {
      flex-direction: column;
      text-align: center;
      gap: var(--space-lg);
    }

    .features-highlight {
      flex-direction: column;
      text-align: center;
      gap: var(--space-lg);
    }
  }

  @media (min-width: 1200px) {
    .features-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  /* Dark Mode */
  @media (prefers-color-scheme: dark) {
    .features {
      background: linear-gradient(180deg, var(--color-bg) 0%, rgba(17, 24, 39, 0.5) 100%);
    }

    .feature-card {
      background: var(--color-gray-900);
      border-color: var(--color-gray-800);
    }

    .feature-card:hover {
      border-color: var(--color-accent-1);
    }

    .bg-pattern {
      opacity: 0.02;
    }
  }

  /* Intersection Observer Animation */
  .feature-card.animate-in {
    animation: none;
    opacity: 1;
    transform: translateY(0);
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .feature-card {
      animation: none;
      opacity: 1;
      transform: none;
    }

    .feature-card:hover {
      transform: none;
    }

    .feature-card:hover .feature-icon {
      transform: none;
    }

    .bg-pattern {
      animation: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const featureCards = document.querySelectorAll('.feature-card');

    // Intersection Observer for animations
    if (window.IntersectionObserver) {
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -100px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const index = entry.target.dataset.featureIndex;
            const delay = parseInt(index) * 100;
            
            setTimeout(() => {
              entry.target.classList.add('animate-in');
            }, delay);
            
            observer.unobserve(entry.target);
          }
        });
      }, observerOptions);

      featureCards.forEach(card => {
        observer.observe(card);
      });
    }

    // Add hover effect tracking for analytics and enhanced accessibility
    featureCards.forEach(card => {
      // Hover tracking
      card.addEventListener('mouseenter', function() {
        const featureTitle = this.querySelector('.feature-title').textContent;
        console.log('Feature hovered:', featureTitle);
        // Here you could send analytics data
      });

      // Enhanced accessibility
      card.setAttribute('tabindex', '0');
      card.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          // Could open a detailed view or navigate to more info
          console.log('Feature activated via keyboard');
        }
      });
    });
  });
</script>