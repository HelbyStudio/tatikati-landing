---
interface Props {
  headers: string[];
  variant?: 'default' | 'striped';
}

const { headers, variant = 'default' } = Astro.props;
---

<div class="table-container">
  <table class={`data-table data-table--${variant}`}>
    <thead>
      <tr>
        {headers.map(header => (
          <th>{header}</th>
        ))}
      </tr>
    </thead>
    <tbody>
      <slot />
    </tbody>
  </table>
</div>

<style>
  .table-container {
    overflow-x: auto;
    margin: 2rem 0;
  }

  .data-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    border: 1px solid var(--color-border, #e9ecef);
    border-radius: var(--radius-md, 0.5rem);
    overflow: hidden;
  }

  .data-table thead {
    background: linear-gradient(135deg, var(--color-accent-4), var(--color-accent-3));
  }

  .data-table th {
    padding: 1rem;
    text-align: left;
    color: white;
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .data-table tbody tr {
    border-bottom: 1px solid var(--color-border, #e9ecef);
  }

  .data-table tbody tr:last-child {
    border-bottom: none;
  }

  .data-table--striped tbody tr:nth-child(even) {
    background-color: var(--color-bg-secondary, #f8f9fa);
  }

  .data-table tbody tr:hover {
    background-color: var(--color-bg-hover, #f1f3f5);
  }

  /* Style for td elements that will be slotted */
  :global(.data-table td) {
    padding: 1rem;
    color: var(--color-text-secondary);
  }

  :global(.data-table td strong) {
    color: var(--color-text-primary);
  }

  @media (max-width: 768px) {
    .data-table {
      font-size: 0.875rem;
    }

    .data-table th,
    :global(.data-table td) {
      padding: 0.75rem 0.5rem;
    }
  }
</style>