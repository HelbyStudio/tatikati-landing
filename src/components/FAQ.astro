---
interface FAQItem {
  id: string;
  question: string;
  answer: string;
  category?: string;
}

const faqData: FAQItem[] = [
  {
    id: 'gratuit',
    question: 'Tatikati est-il vraiment gratuit ?',
    answer: 'Oui, Tatikati propose un large catalogue de podcasts totalement gratuit. Nous proposons également des playlists premium avec des contenus exclusifs pour les familles qui souhaitent aller plus loin.',
    category: 'pricing'
  },
  {
    id: 'age',
    question: 'Pour quels âges Tatikati est-il adapté ?',
    answer: 'Tatikati s\'adresse aux enfants de 3 à 12 ans. Nos contenus sont organisés par tranche d\'âge et nos playlists thématiques permettent de trouver facilement les podcasts adaptés à chaque enfant.',
    category: 'usage'
  },
  {
    id: 'mode-enfant',
    question: 'Comment fonctionne le mode enfant ?',
    answer: 'Le mode enfant propose une interface simplifiée avec navigation audio, commandes vocales, et aucune publicité. Les enfants peuvent utiliser l\'application en toute autonomie et sécurité, sans risque d\'accéder à du contenu inapproprié.',
    category: 'features'
  },
  {
    id: 'hors-ligne',
    question: 'Peut-on écouter les podcasts hors ligne ?',
    answer: 'Oui, vous pouvez télécharger vos podcasts favoris pour les écouter sans connexion internet. Parfait pour les voyages en voiture ou les moments sans réseau.',
    category: 'features'
  },
  {
    id: 'contenu',
    question: 'Qui sélectionne les contenus ?',
    answer: 'Je sélectionne soigneusement chaque contenu avec l\'aide de parents et d\'experts en développement de l\'enfant. Nous privilégions la qualité éditoriale et évitons les algorithmes de recommandation intrusifs.',
    category: 'content'
  },
  {
    id: 'ecrans',
    question: 'Pourquoi pas d\'écran pendant l\'écoute ?',
    answer: 'L\'écoute sans écran favorise l\'imagination, la concentration et limite l\'exposition aux écrans. Le mode "écran noir" permet une immersion totale dans les histoires et développe l\'écoute active.',
    category: 'features'
  },
  {
    id: 'donnees',
    question: 'Mes données sont-elles protégées ?',
    answer: 'Absolument. Nous respectons scrupuleusement le RGPD et ne collectons que les données strictement nécessaires au fonctionnement de l\'application. Aucune donnée n\'est vendue à des tiers.',
    category: 'privacy'
  },
  {
    id: 'support',
    question: 'Comment contacter le support ?',
    answer: 'Notre équipe support est disponible par email à support@tatikati.app. Nous nous engageons à répondre dans les 24h et sommes là pour vous aider avec toutes vos questions.',
    category: 'support'
  }
];

interface Props {
  title?: string;
  subtitle?: string;
  showCategories?: boolean;
  maxItems?: number;
}

const {
  title = "Questions fréquentes",
  subtitle = "Tout ce que vous devez savoir sur Tatikati",
  showCategories = true,
  maxItems
} = Astro.props;

const displayFAQ = maxItems ? faqData.slice(0, maxItems) : faqData;

// Group FAQ by category if needed
const categories = showCategories ? {
  'pricing': 'Tarifs & Abonnement',
  'usage': 'Utilisation',
  'features': 'Fonctionnalités', 
  'content': 'Contenus',
  'privacy': 'Confidentialité',
  'support': 'Support'
} : {};

const groupedFAQ = showCategories 
  ? Object.keys(categories).reduce((acc, category) => {
      acc[category] = displayFAQ.filter(item => item.category === category);
      return acc;
    }, {} as Record<string, FAQItem[]>)
  : { all: displayFAQ };
---

<section class="faq" id="faq">
  <div class="container">
    <!-- Section Header -->
    <div class="faq-header">
      <h2 class="section-title">{title}</h2>
      <p class="section-subtitle">{subtitle}</p>
    </div>

    <!-- FAQ Content -->
    <div class="faq-content">
      {Object.entries(groupedFAQ).map(([categoryKey, items]) => (
        items.length > 0 && (
          <div class="faq-category" data-category={categoryKey}>
            {showCategories && categoryKey !== 'all' && (
              <h3 class="category-title">{categories[categoryKey]}</h3>
            )}
            
            <div class="faq-list">
              {items.map((faq, index) => (
                <div 
                  class="faq-item" 
                  data-faq-id={faq.id}
                  data-faq-index={index}
                >
                  <button 
                    class="faq-question"
                    aria-expanded="false"
                    aria-controls={`faq-answer-${faq.id}`}
                  >
                    <span class="question-text">{faq.question}</span>
                    <span class="question-icon" aria-hidden="true">
                      <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M10 6L6 10L10 14L14 10L10 6Z" />
                      </svg>
                    </span>
                  </button>
                  
                  <div 
                    class="faq-answer" 
                    id={`faq-answer-${faq.id}`}
                    role="region"
                    aria-labelledby={`faq-question-${faq.id}`}
                  >
                    <div class="answer-content">
                      <p>{faq.answer}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )
      ))}
    </div>

    <!-- FAQ Footer -->
    <div class="faq-footer">
      <div class="faq-contact">
        <h3 class="contact-title">Une autre question ?</h3>
        <p class="contact-description">
          Notre équipe est là pour vous aider. N'hésitez pas à nous contacter pour toute question supplémentaire.
        </p>
        <div class="contact-actions">
          <a 
            href="mailto:support@tatikati.app" 
            class="btn btn-primary"
            aria-label="Contacter le support par email"
          >
            <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
              <path d="M2 4L10 10L18 4V2H2V4ZM2 6V16H18V6L10 12L2 6Z"/>
            </svg>
            Nous contacter
          </a>
          
          <a href="/blog" class="btn btn-secondary">
            <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
              <path d="M4 6H16V8H4V6ZM4 10H16V12H4V10ZM4 14H12V16H4V14ZM2 2H18C19.1 2 20 2.9 20 4V16C20 17.1 19.1 18 18 18H2C0.9 18 0 17.1 0 16V4C0 2.9 0.9 2 2 2Z"/>
            </svg>
            Lire nos guides
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Background Elements -->
  <div class="faq-bg" aria-hidden="true">
    <div class="bg-element bg-element-1"></div>
    <div class="bg-element bg-element-2"></div>
  </div>
</section>

<style>
  .faq {
    padding: var(--space-4xl) 0;
    background: var(--color-bg);
    position: relative;
    overflow: hidden;
  }

  .faq-header {
    text-align: center;
    margin-bottom: var(--space-4xl);
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
  }

  .section-title {
    font-family: var(--font-heading);
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 700;
    color: var(--color-fg);
    margin-bottom: var(--space-lg);
  }

  .section-subtitle {
    font-size: clamp(1.1rem, 2vw, 1.25rem);
    color: var(--color-gray-600);
    line-height: 1.6;
  }

  /* FAQ Content */
  .faq-content {
    max-width: 800px;
    margin: 0 auto var(--space-4xl);
  }

  .faq-category {
    margin-bottom: var(--space-3xl);
  }

  .category-title {
    font-family: var(--font-heading);
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--color-accent-1);
    margin-bottom: var(--space-xl);
    padding-bottom: var(--space-sm);
    border-bottom: 2px solid var(--color-accent-1);
  }

  .faq-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  /* FAQ Items */
  .faq-item {
    background: white;
    border: 1px solid var(--color-gray-200);
    border-radius: var(--radius-lg);
    overflow: hidden;
    transition: all 0.3s ease;
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.6s ease-out forwards;
  }

  .faq-item:nth-child(1) { animation-delay: 0.1s; }
  .faq-item:nth-child(2) { animation-delay: 0.2s; }
  .faq-item:nth-child(3) { animation-delay: 0.3s; }
  .faq-item:nth-child(4) { animation-delay: 0.4s; }
  .faq-item:nth-child(5) { animation-delay: 0.5s; }
  .faq-item:nth-child(6) { animation-delay: 0.6s; }

  .faq-item:hover {
    border-color: var(--color-accent-1);
    box-shadow: var(--shadow-card);
  }

  .faq-item.active {
    border-color: var(--color-accent-1);
    box-shadow: var(--shadow-soft);
  }

  .faq-question {
    width: 100%;
    padding: var(--space-xl);
    background: transparent;
    border: none;
    text-align: left;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--space-lg);
    transition: all 0.2s ease;
  }

  .faq-question:hover {
    background: var(--color-gray-25);
  }

  .faq-question:focus {
    outline: 2px solid var(--color-accent-1);
    outline-offset: -2px;
  }

  .question-text {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--color-fg);
    line-height: 1.4;
  }

  .question-icon {
    flex-shrink: 0;
    color: var(--color-accent-1);
    transition: transform 0.3s ease;
  }

  .faq-item.active .question-icon {
    transform: rotate(180deg);
  }

  /* FAQ Answers */
  .faq-answer {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.4s ease, padding 0.4s ease;
  }

  .faq-item.active .faq-answer {
    max-height: 500px;
    padding-bottom: var(--space-xl);
  }

  .answer-content {
    padding: 0 var(--space-xl);
    border-top: 1px solid var(--color-gray-200);
    padding-top: var(--space-lg);
  }

  .answer-content p {
    color: var(--color-gray-600);
    line-height: 1.6;
    margin: 0;
  }

  /* FAQ Footer */
  .faq-footer {
    text-align: center;
  }

  .faq-contact {
    background: linear-gradient(135deg, var(--color-gray-25), var(--color-accent-4) 1%, var(--color-gray-25));
    border-radius: var(--radius-2xl);
    padding: var(--space-3xl);
  }

  .contact-title {
    font-family: var(--font-heading);
    font-size: clamp(1.5rem, 3vw, 2rem);
    font-weight: 700;
    color: var(--color-fg);
    margin-bottom: var(--space-md);
  }

  .contact-description {
    color: var(--color-gray-600);
    font-size: 1.1rem;
    line-height: 1.6;
    margin-bottom: var(--space-xl);
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
  }

  .contact-actions {
    display: flex;
    gap: var(--space-lg);
    justify-content: center;
    flex-wrap: wrap;
  }

  .contact-actions .btn {
    display: inline-flex;
    align-items: center;
    gap: var(--space-sm);
  }

  /* Background Elements */
  .faq-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    pointer-events: none;
  }

  .bg-element {
    position: absolute;
    border-radius: 50%;
    opacity: 0.02;
  }

  .bg-element-1 {
    top: 10%;
    left: -10%;
    width: 300px;
    height: 300px;
    background: radial-gradient(circle, var(--color-accent-1) 2px, transparent 2px);
    background-size: 30px 30px;
    animation: drift 30s linear infinite;
  }

  .bg-element-2 {
    bottom: -5%;
    right: -10%;
    width: 200px;
    height: 200px;
    background: radial-gradient(circle, var(--color-accent-3) 2px, transparent 2px);
    background-size: 25px 25px;
    animation: drift 25s linear infinite reverse;
  }

  /* Animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes drift {
    0% { transform: translate(0, 0) rotate(0deg); }
    25% { transform: translate(30px, -20px) rotate(90deg); }
    50% { transform: translate(0, -40px) rotate(180deg); }
    75% { transform: translate(-30px, -20px) rotate(270deg); }
    100% { transform: translate(0, 0) rotate(360deg); }
  }

  /* Responsive Design */
  @media (max-width: 767px) {
    .faq-question {
      padding: var(--space-lg);
    }

    .answer-content {
      padding: 0 var(--space-lg);
    }

    .faq-item.active .faq-answer {
      padding-bottom: var(--space-lg);
    }

    .contact-actions {
      flex-direction: column;
      align-items: center;
    }

    .category-title {
      font-size: 1.25rem;
    }
  }

  /* Dark Mode */
  @media (prefers-color-scheme: dark) {
    .faq-item {
      background: var(--color-gray-900);
      border-color: var(--color-gray-800);
    }

    .faq-question:hover {
      background: rgba(255, 255, 255, 0.05);
    }

    .answer-content {
      border-top-color: var(--color-gray-800);
    }

    .faq-contact {
      background: linear-gradient(135deg, rgba(17, 24, 39, 0.5), rgba(107, 203, 119, 0.05), rgba(17, 24, 39, 0.5));
    }
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .faq-item {
      border-width: 2px;
    }

    .faq-question:focus {
      outline-width: 3px;
    }
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .faq-item {
      animation: none;
      opacity: 1;
      transform: none;
    }

    .faq-answer {
      transition: none;
    }

    .question-icon {
      transition: none;
    }

    .bg-element {
      animation: none;
    }
  }

  /* Print Styles */
  @media print {
    .faq-item {
      break-inside: avoid;
      border: 1px solid #ccc;
    }

    .faq-answer {
      max-height: none;
      overflow: visible;
      padding-bottom: 1rem;
    }

    .answer-content {
      padding-top: 0.5rem;
    }

    .question-icon {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // FAQ accordion functionality
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach(item => {
      const question = item.querySelector('.faq-question');
      const answer = item.querySelector('.faq-answer');
      
      if (question && answer) {
        question.addEventListener('click', function() {
          const isActive = item.classList.contains('active');
          
          // Close all other items (optional - remove for multi-open behavior)
          faqItems.forEach(otherItem => {
            if (otherItem !== item) {
              otherItem.classList.remove('active');
              const otherQuestion = otherItem.querySelector('.faq-question');
              if (otherQuestion) {
                otherQuestion.setAttribute('aria-expanded', 'false');
              }
            }
          });
          
          // Toggle current item
          item.classList.toggle('active');
          question.setAttribute('aria-expanded', (!isActive).toString());
          
          // Analytics tracking
          const faqId = item.dataset.faqId;
          if (!isActive && faqId) {
            console.log('FAQ opened:', faqId);
            // Example: gtag('event', 'faq_open', { question_id: faqId });
          }
        });

        // Keyboard navigation
        question.addEventListener('keydown', function(e) {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            question.click();
          }
        });
      }
    });

    // Intersection Observer for animation
    if (window.IntersectionObserver) {
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -100px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-in');
            observer.unobserve(entry.target);
          }
        });
      }, observerOptions);

      faqItems.forEach(item => {
        observer.observe(item);
      });
    }

    // Auto-expand FAQ from URL hash
    if (window.location.hash) {
      const targetId = window.location.hash.substring(1);
      const targetItem = document.querySelector(`[data-faq-id="${targetId}"]`);
      
      if (targetItem) {
        targetItem.classList.add('active');
        const question = targetItem.querySelector('.faq-question');
        if (question) {
          question.setAttribute('aria-expanded', 'true');
        }
        
        // Scroll to the item with some delay for animation
        setTimeout(() => {
          targetItem.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
          });
        }, 100);
      }
    }

    // Search functionality (if needed)
    function searchFAQ(query) {
      const searchTerm = query.toLowerCase();
      
      faqItems.forEach(item => {
        const question = item.querySelector('.question-text')?.textContent.toLowerCase();
        const answer = item.querySelector('.answer-content p')?.textContent.toLowerCase();
        
        const matches = question?.includes(searchTerm) || answer?.includes(searchTerm);
        item.style.display = matches ? 'block' : 'none';
      });
    }

    // Export search function for external use
    window.searchFAQ = searchFAQ;
  });
</script>