---
import { Image } from 'astro:assets';

interface Props {
  title?: string;
  subtitle?: string;
  description?: string;
  ctaText?: string;
  ctaLink?: string;
  heroImage?: string;
  heroImageAlt?: string;
}

const {
  title = "Des podcasts pour enfants sans écran",
  subtitle = "Tatikati",
  description = "Découvrez l'application qui révolutionne l'écoute de podcasts pour les enfants. Mode enfant sécurisé, navigation audio, et des contenus soigneusement sélectionnés sans algorithme intrusif.",
  ctaText = "Télécharger gratuitement",
  ctaLink = "#download",
  heroImage = "https://images.unsplash.com/photo-1544717297-fa95b6ee9643?w=600&h=400&fit=crop&crop=center",
  heroImageAlt = "Enfant écoutant des podcasts avec des écouteurs colorés"
} = Astro.props;
---

<section class="hero" id="hero">
  <div class="container">
    <div class="hero-content">
      <!-- Text Content -->
      <div class="hero-text">
        
        <h1 class="hero-title">
          <span class="hero-subtitle">{subtitle}</span>
          <span class="hero-main-title">{title}</span>
        </h1>
        
        <p class="hero-description">{description}</p>
        
        <div class="hero-actions">
          <a href={ctaLink} class="btn btn-primary btn-lg hero-cta">
            <span>{ctaText}</span>
            <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path d="M10 2L3 9h4v7h6V9h4l-7-7z"/>
            </svg>
          </a>
        </div>
      </div>
      
      <!-- Hero Image -->
      <div class="hero-visual">
        <div class="hero-image-container">
          <img 
            src={heroImage}
            alt={heroImageAlt}
            class="hero-image"
            loading="eager"
            width="600"
            height="400"
          />
        </div>
      </div>
    </div>
  </div>
  
  <!-- Background Elements -->
  <div class="hero-bg-elements" aria-hidden="true">
    <div class="bg-circle bg-circle-1"></div>
    <div class="bg-circle bg-circle-2"></div>
    <div class="bg-circle bg-circle-3"></div>
  </div>
</section>

<style>
  .hero {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    padding: var(--space-3xl) 0;
    margin-top: 80px; /* Account for fixed navbar */
    overflow: hidden;
    background: linear-gradient(135deg, var(--color-bg) 0%, var(--color-accent-4) 1%, var(--color-bg) 100%);
  }

  .hero-content {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-3xl);
    align-items: center;
    position: relative;
    z-index: 2;
  }

  .hero-text {
    text-align: center;
  }

  .hero-badge {
    display: inline-flex;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-sm) var(--space-lg);
    background: rgba(255, 107, 107, 0.1);
    border: 1px solid rgba(255, 107, 107, 0.2);
    border-radius: var(--radius-full);
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--color-accent-1);
    margin-bottom: var(--space-xl);
    animation: fadeInUp 0.8s ease-out;
  }

  .badge-icon {
    font-size: 1.1rem;
  }

  .hero-title {
    margin-bottom: var(--space-xl);
    animation: fadeInUp 0.8s ease-out 0.2s both;
  }

  .hero-subtitle {
    display: block;
    font-family: var(--font-heading);
    font-size: clamp(2rem, 5vw, 4rem);
    font-weight: 400;
    color: var(--color-accent-1);
    line-height: 1.1;
    margin-bottom: var(--space-sm);
  }

  .hero-main-title {
    display: block;
    font-family: var(--font-heading);
    font-size: clamp(1.75rem, 4vw, 3rem);
    font-weight: 600;
    color: var(--color-fg);
    line-height: 1.2;
  }

  .hero-description {
    font-size: clamp(1.1rem, 2vw, 1.25rem);
    line-height: 1.6;
    color: var(--color-gray-600);
    max-width: 600px;
    margin: 0 auto var(--space-2xl);
    animation: fadeInUp 0.8s ease-out 0.4s both;
  }

  .hero-actions {
    display: flex;
    flex-direction: column;
    gap: var(--space-lg);
    align-items: center;
    margin-bottom: var(--space-2xl);
    animation: fadeInUp 0.8s ease-out 0.6s both;
  }

  .hero-cta,
  .hero-demo {
    display: inline-flex;
    align-items: center;
    gap: var(--space-sm);
    white-space: nowrap;
  }

  .hero-stats {
    display: flex;
    justify-content: center;
    gap: var(--space-2xl);
    padding-top: var(--space-xl);
    border-top: 1px solid var(--color-gray-200);
    animation: fadeInUp 0.8s ease-out 0.8s both;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-family: var(--font-heading);
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-accent-1);
    line-height: 1;
  }

  .stat-label {
    display: block;
    font-size: 0.9rem;
    color: var(--color-gray-600);
    margin-top: var(--space-xs);
  }

  /* Hero Visual */
  .hero-visual {
    position: relative;
    display: flex;
    justify-content: center;
    animation: fadeIn 1s ease-out 0.4s both;
  }

  .hero-image-container {
    position: relative;
    width: 100%;
    max-width: 500px;
  }

  .hero-image {
    width: 100%;
    height: auto;
    border-radius: var(--radius-2xl);
    box-shadow: var(--shadow-card);
    transform: perspective(1000px) rotateY(-5deg) rotateX(2deg);
    transition: transform 0.4s ease;
  }

  .hero-image:hover {
    transform: perspective(1000px) rotateY(-2deg) rotateX(1deg) scale(1.02);
  }

  /* Floating Elements */
  .floating-element {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-full);
    box-shadow: var(--shadow-soft);
    animation: float 3s ease-in-out infinite;
  }

  .floating-play {
    top: 10%;
    right: -10%;
    width: 60px;
    height: 60px;
    background: var(--color-accent-1);
    color: white;
    animation-delay: -0.5s;
  }

  .floating-heart {
    top: 60%;
    left: -10%;
    width: 50px;
    height: 50px;
    background: var(--color-accent-2);
    color: white;
    animation-delay: -1s;
  }

  .floating-sound {
    bottom: 20%;
    right: -15%;
    width: 70px;
    height: 70px;
    background: var(--color-accent-3);
    color: white;
    animation-delay: -1.5s;
  }

  .sound-waves {
    position: absolute;
    right: -20px;
    display: flex;
    gap: 2px;
  }

  .sound-waves span {
    width: 3px;
    background: var(--color-accent-3);
    border-radius: 2px;
    animation: wave 1s ease-in-out infinite;
  }

  .sound-waves span:nth-child(1) {
    height: 8px;
    animation-delay: 0s;
  }

  .sound-waves span:nth-child(2) {
    height: 16px;
    animation-delay: 0.2s;
  }

  .sound-waves span:nth-child(3) {
    height: 12px;
    animation-delay: 0.4s;
  }

  /* Background Elements */
  .hero-bg-elements {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    pointer-events: none;
  }

  .bg-circle {
    position: absolute;
    border-radius: 50%;
    opacity: 0.05;
    animation: pulse 8s ease-in-out infinite;
  }

  .bg-circle-1 {
    top: 10%;
    left: 10%;
    width: 200px;
    height: 200px;
    background: var(--color-accent-1);
    animation-delay: 0s;
  }

  .bg-circle-2 {
    top: 50%;
    right: 10%;
    width: 150px;
    height: 150px;
    background: var(--color-accent-2);
    animation-delay: 2s;
  }

  .bg-circle-3 {
    bottom: 10%;
    left: 20%;
    width: 100px;
    height: 100px;
    background: var(--color-accent-3);
    animation-delay: 4s;
  }

  /* Animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  @keyframes wave {
    0%, 100% {
      transform: scaleY(1);
    }
    50% {
      transform: scaleY(1.5);
    }
  }

  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
      opacity: 0.05;
    }
    50% {
      transform: scale(1.1);
      opacity: 0.02;
    }
  }

  /* Responsive Design */
  @media (min-width: 768px) {
    .hero-content {
      grid-template-columns: 1fr 1fr;
      gap: var(--space-4xl);
    }

    .hero-text {
      text-align: left;
    }

    .hero-actions {
      flex-direction: row;
      justify-content: flex-start;
    }

    .hero-stats {
      justify-content: flex-start;
    }
  }

  @media (min-width: 1024px) {
    .hero {
      margin-top: 0;
      min-height: calc(100vh - 80px);
    }
  }

  /* Dark Mode */
  @media (prefers-color-scheme: dark) {
    .hero {
      background: linear-gradient(135deg, var(--color-bg) 0%, rgba(107, 203, 119, 0.05) 1%, var(--color-bg) 100%);
    }

    .hero-badge {
      background: rgba(255, 107, 107, 0.15);
      border-color: rgba(255, 107, 107, 0.3);
    }

    .hero-stats {
      border-top-color: var(--color-gray-800);
    }
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .hero-image,
    .floating-element,
    .bg-circle {
      animation: none;
    }

    .hero-title,
    .hero-description,
    .hero-actions,
    .hero-stats,
    .hero-visual {
      animation: none;
      opacity: 1;
      transform: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Demo button functionality
    const demoButton = document.querySelector('[data-demo-trigger]');
    if (demoButton) {
      demoButton.addEventListener('click', function() {
        // Here you could open a modal with a demo video or navigate to a demo page
        console.log('Demo requested');
        // For now, just scroll to podcasts section
        const podcastsSection = document.querySelector('#podcasts');
        if (podcastsSection) {
          podcastsSection.scrollIntoView({ behavior: 'smooth' });
        }
      });
    }

    // Parallax effect for hero image on scroll
    const heroImage = document.querySelector('.hero-image');
    if (heroImage && window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
      window.addEventListener('scroll', function() {
        const scrolled = window.pageYOffset;
        const rate = scrolled * -0.2;
        heroImage.style.transform = `perspective(1000px) rotateY(-5deg) rotateX(2deg) translateY(${rate}px)`;
      });
    }
  });
</script>